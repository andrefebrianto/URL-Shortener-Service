// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import domain "github.com/andrefebrianto/URL-Shortener-Service/model"
import mock "github.com/stretchr/testify/mock"

// ShortLinkQueryRepository is an autogenerated mock type for the ShortLinkQueryRepository type
type ShortLinkQueryRepository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *ShortLinkQueryRepository) GetAll(ctx context.Context) ([]domain.ShortLink, error) {
	ret := _m.Called(ctx)

	var r0 []domain.ShortLink
	if rf, ok := ret.Get(0).(func(context.Context) []domain.ShortLink); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ShortLink)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCode provides a mock function with given fields: ctx, code
func (_m *ShortLinkQueryRepository) GetByCode(ctx context.Context, code string) (*domain.ShortLink, error) {
	ret := _m.Called(ctx, code)

	var r0 *domain.ShortLink
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.ShortLink); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ShortLink)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
