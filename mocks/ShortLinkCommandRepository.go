// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import domain "github.com/andrefebrianto/URL-Shortener-Service/model"
import mock "github.com/stretchr/testify/mock"

// ShortLinkCommandRepository is an autogenerated mock type for the ShortLinkCommandRepository type
type ShortLinkCommandRepository struct {
	mock.Mock
}

// AddCounterByCode provides a mock function with given fields: ctx, code, counter
func (_m *ShortLinkCommandRepository) AddCounterByCode(ctx context.Context, code string, counter uint64) error {
	ret := _m.Called(ctx, code, counter)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) error); ok {
		r0 = rf(ctx, code, counter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, shortlink
func (_m *ShortLinkCommandRepository) Create(ctx context.Context, shortlink *domain.ShortLink) error {
	ret := _m.Called(ctx, shortlink)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ShortLink) error); ok {
		r0 = rf(ctx, shortlink)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByCode provides a mock function with given fields: ctx, code
func (_m *ShortLinkCommandRepository) DeleteByCode(ctx context.Context, code string) error {
	ret := _m.Called(ctx, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateByCode provides a mock function with given fields: ctx, shortlink
func (_m *ShortLinkCommandRepository) UpdateByCode(ctx context.Context, shortlink *domain.ShortLink) error {
	ret := _m.Called(ctx, shortlink)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ShortLink) error); ok {
		r0 = rf(ctx, shortlink)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
